global:
  default_inherits: default

tools:
  default:
    cores: 1
    mem: cores * 3.8
    gpus: 0
    env: {}
    context:
      partition: main
      max_concurrent_job_count_for_tool_total: null
      max_concurrent_job_count_for_tool_user: null
      require_login: false
    scheduling:
      reject:
        - offline
    rules:
    - id: login_required_rule
      if: require_login and user is None
      fail: 'Please log in to use {tool.id}'
    - id: max_concurrent_job_count_for_tool_rule
      if: |
        total_limit_exceeded = False
        user_limit_exceeded = False
        if max_concurrent_job_count_for_tool_total:
          total_limit_exceeded = helpers.concurrent_job_count_for_tool(app, tool) >= max_concurrent_job_count_for_tool_total
        if max_concurrent_job_count_for_tool_user and not total_limit_exceeded:
          user_limit_exceeded = helpers.concurrent_job_count_for_tool(app, tool, user) >= max_concurrent_job_count_for_tool_user
        total_limit_exceeded or user_limit_exceeded
      execute: |
        from galaxy.jobs.mapper import JobNotReadyException
        raise JobNotReadyException()
    - id: default_destination_debug_rule
      if: 1 == 1
      execute: |
        log.debug("********** PRINTING ENTITY CORES AND MEM")
        log.debug(f'cores: {str(entity.cores)}')
        log.debug(f'mem: {str(entity.mem)}')

    rank: |
      final_destinations = helpers.weighted_random_sampling(candidate_destinations)
      final_destinations
